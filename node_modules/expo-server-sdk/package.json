{
  "_from": "expo-server-sdk",
  "_id": "expo-server-sdk@3.2.0",
  "_inBundle": false,
  "_integrity": "sha512-T5qs+0YVmFGvPA9kDCyc6R9gV3Y1EuGSXFVgBKIlRi0Ri0yNqo58KGe529G423aeR6XsV/T7iubQQOZiMfdIww==",
  "_location": "/expo-server-sdk",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "expo-server-sdk",
    "fetchSpec": "latest",
    "name": "expo-server-sdk",
    "raw": "expo-server-sdk",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/expo-server-sdk/-/expo-server-sdk-3.2.0.tgz",
  "_shasum": "f35cffb2b32b3961db6c7f974b18330cfbb47d16",
  "_spec": "expo-server-sdk",
  "_where": "/Users/vanshikachowdhary/Desktop/nob-server/lib",
  "author": {
    "name": "support@expo.io"
  },
  "bugs": {
    "url": "https://github.com/expo/expo-server-sdk-node/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "node-fetch": "^2.3.0",
    "promise-limit": "^2.7.0"
  },
  "deprecated": false,
  "description": "Server side library for working with Expo using Node.js",
  "devDependencies": {
    "@types/invariant": "^2.2.29",
    "@types/jest": "^23.3.10",
    "@types/node-fetch": "^2.1.4",
    "jest": "^23.6.0",
    "ts-jest": "^23.10.5",
    "typescript": "^3.2.1"
  },
  "files": [
    "build",
    "src"
  ],
  "homepage": "https://github.com/expo/expo-server-sdk-node#readme",
  "jest": {
    "globals": {
      "ts-jest": {
        "tsConfig": "tsconfig.json"
      }
    },
    "moduleFileExtensions": [
      "js",
      "ts"
    ],
    "preset": "ts-jest",
    "roots": [
      "<rootDir>/src/"
    ],
    "testEnvironment": "node",
    "testMatch": [
      "**/__tests__/*.+(js|ts)"
    ]
  },
  "keywords": [
    "expo",
    "push-notifications"
  ],
  "license": "MIT",
  "main": "build/ExpoClient.js",
  "name": "expo-server-sdk",
  "optionalDependencies": {},
  "readme": "# expo-server-sdk-node [![CircleCI](https://circleci.com/gh/expo/expo-server-sdk-node.svg?style=svg)](https://circleci.com/gh/expo/expo-server-sdk-node) [![codecov](https://codecov.io/gh/expo/expo-server-sdk-node/branch/master/graph/badge.svg)](https://codecov.io/gh/expo/expo-server-sdk-node)\nServer-side library for working with Expo using Node.js.\n\nIf you have problems with the code in this repository, please file issues & bug reports at https://github.com/expo/expo. Thanks!\n\n## Usage\n\n_Note: the following code assumes that you are using JavaScript modules with `import`. If you aren't then you should use the old syntax for the SDK import: `const { Expo } = require('expo-server-sdk')`._\n\n```bash\nyarn add expo-server-sdk\n```\n\n```js\nimport Expo from 'expo-server-sdk';\n\n// Create a new Expo SDK client\nlet expo = new Expo();\n\n// Create the messages that you want to send to clents\nlet messages = [];\nfor (let pushToken of somePushTokens) {\n  // Each push token looks like ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]\n\n  // Check that all your push tokens appear to be valid Expo push tokens\n  if (!Expo.isExpoPushToken(pushToken)) {\n    console.error(`Push token ${pushToken} is not a valid Expo push token`);\n    continue;\n  }\n\n  // Construct a message (see https://docs.expo.io/versions/latest/guides/push-notifications.html)\n  messages.push({\n    to: pushToken,\n    sound: 'default',\n    body: 'This is a test notification',\n    data: { withSome: 'data' },\n  })\n}\n\n// The Expo push notification service accepts batches of notifications so\n// that you don't need to send 1000 requests to send 1000 notifications. We\n// recommend you batch your notifications to reduce the number of requests\n// and to compress them (notifications with similar content will get\n// compressed).\nlet chunks = expo.chunkPushNotifications(messages);\nlet tickets = [];\n(async () => {\n  // Send the chunks to the Expo push notification service. There are\n  // different strategies you could use. A simple one is to send one chunk at a\n  // time, which nicely spreads the load out over time:\n  for (let chunk of chunks) {\n    try {\n      let ticketChunk = await expo.sendPushNotificationsAsync(chunk);\n      console.log(ticketChunk);\n      tickets.push(...ticketChunk);\n      // NOTE: If a ticket contains an error code in ticket.details.error, you\n      // must handle it appropriately. The error codes are listed in the Expo\n      // documentation:\n      // https://docs.expo.io/versions/latest/guides/push-notifications#response-format\n    } catch (error) {\n      console.error(error);\n    }\n  }\n})();\n\n...\n\n// Later, after the Expo push notification service has delivered the\n// notifications to Apple or Google (usually quickly, but allow the the service\n// up to 30 minutes when under load), a \"receipt\" for each notification is\n// created. The receipts will be available for at least a day; stale receipts\n// are deleted.\n//\n// The ID of each receipt is sent back in the response \"ticket\" for each\n// notification. In summary, sending a notification produces a ticket, which\n// contains a receipt ID you later use to get the receipt.\n//\n// The receipts may contain error codes to which you must respond. In\n// particular, Apple or Google may block apps that continue to send\n// notifications to devices that have blocked notifications or have uninstalled\n// your app. Expo does not control this policy and sends back the feedback from\n// Apple and Google so you can handle it appropriately.\nlet receiptIds = [];\nfor (let ticket of tickets) {\n  // NOTE: Not all tickets have IDs; for example, tickets for notifications\n  // that could not be enqueued will have error information and no receipt ID.\n  if (ticket.id) {\n    receiptIds.push(ticket.id);\n  }\n}\n\nlet receiptIdChunks = expo.chunkPushNotificationReceiptIds(receiptIds);\n(async () => {\n  // Like sending notifications, there are different strategies you could use\n  // to retrieve batches of receipts from the Expo service.\n  for (let chunk of receiptIdChunks) {\n    try {\n      let receipts = await expo.getPushNotificationReceiptsAsync(chunk);\n      console.log(receipts);\n\n      // The receipts specify whether Apple or Google successfully received the\n      // notification and information about an error, if one occurred.\n      for (let receipt of receipts) {\n        if (receipt.status === 'ok') {\n          continue;\n        } else if (receipt.status === 'error') {\n          console.error(`There was an error sending a notification: ${receipt.message}`);\n          if (receipt.details && receipt.details.error) {\n            // The error codes are listed in the Expo documentation:\n            // https://docs.expo.io/versions/latest/guides/push-notifications#response-format\n            // You must handle the errors appropriately.\n            console.error(`The error code is ${receipt.details.error}`);\n          }\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n})();\n\n```\n\n## Developing\n\nThe source code is in the `src/` directory and babel is used to turn it into ES5 that goes in the `build/` directory.\n\nTo build, `npm run build`.\n\nTo build and watch for changes, `npm run watch`.\n\n## TODO\n\n  * Need to add tests\n\n## See Also\n\n  * https://github.com/expo/expo-server-sdk-ruby\n  * https://github.com/expo/expo-server-sdk-python\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expo/expo-server-sdk-node.git"
  },
  "scripts": {
    "babel": "babel",
    "build": "./build.sh",
    "prepublish": "npm run build",
    "test": "jest",
    "tsc": "tsc",
    "watch": "tsc --watch"
  },
  "types": "build/ExpoClient.d.ts",
  "version": "3.2.0"
}
